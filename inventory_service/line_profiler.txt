attempting connection
connected
Added item: Laptop2
Deducted 2 units from item ID 2
Updated item: Laptop2, New price: 1400.0
Total inventory items: 1
Timer unit: 1e-07 s

Total time: 0.0295451 s
File: C:\Users\User\Desktop\AUB\FALL_24_25\EECE_435L\Project\435L-Project\inventory_service\services\inventory_service.py
Function: add_goods at line 6

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     6                                           def add_goods(data):
     7                                               """
     8                                               Add new goods to the inventory.
     9                                           
    10                                               Args:
    11                                                   data (dict): A dictionary containing the following keys:
    12                                                       - name (str): The name of the item.
    13                                                       - category (str): The category of the item.
    14                                                       - price_per_item (float): The price per unit of the item.
    15                                                       - description (str, optional): A brief description of the item.
    16                                                       - count_in_stock (int): The quantity of the item to be added.
    17                                           
    18                                               Raises:
    19                                                   ValueError: If the item already exists or if there is a database integrity error.
    20                                           
    21                                               Returns:
    22                                                   Inventory: The newly added inventory item.
    23                                               """
    24         1     140523.0 140523.0     47.6      existing_goods = Inventory.query.filter_by(name=data["name"]).first()
    25         1          4.0      4.0      0.0      if existing_goods:
    26                                                   raise ValueError("Item already exists.")
    27                                           
    28         2       1560.0    780.0      0.5      new_goods = Inventory(
    29         1          5.0      5.0      0.0          name=data["name"],
    30         1          2.0      2.0      0.0          category=data["category"],
    31         1          3.0      3.0      0.0          price_per_item=data["price_per_item"],
    32         1         10.0     10.0      0.0          description=data.get("description", ""),
    33         1          3.0      3.0      0.0          count_in_stock=data["count_in_stock"],
    34                                               )
    35         1          2.0      2.0      0.0      try:
    36         1       1086.0   1086.0      0.4          db.session.add(new_goods)
    37         1     152244.0 152244.0     51.5          db.session.commit()
    38         1          9.0      9.0      0.0          return new_goods
    39                                               except IntegrityError:
    40                                                   db.session.rollback()
    41                                                   raise ValueError("Failed to add goods due to a database integrity error.")

Total time: 0.0124752 s
File: C:\Users\User\Desktop\AUB\FALL_24_25\EECE_435L\Project\435L-Project\inventory_service\services\inventory_service.py
Function: deduct_goods at line 43

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    43                                           def deduct_goods(item_id, count):
    44                                               """
    45                                               Deduct a specific quantity of goods from the inventory.
    46                                           
    47                                               Args:
    48                                                   item_id (int): The ID of the inventory item.
    49                                                   count (int): The quantity to deduct.
    50                                           
    51                                               Raises:
    52                                                   ValueError: If the item is not found or if the stock is insufficient.
    53                                           
    54                                               Returns:
    55                                                   Inventory: The updated inventory item.
    56                                               """
    57         1       4599.0   4599.0      3.7      goods = Inventory.query.get(item_id)
    58         1          4.0      4.0      0.0      if not goods:
    59                                                   raise ValueError("Item not found")
    60         1         38.0     38.0      0.0      if goods.count_in_stock < count:
    61                                                   raise ValueError("Insufficient stock")
    62         1        254.0    254.0      0.2      goods.count_in_stock -= count
    63         1     119850.0 119850.0     96.1      db.session.commit()
    64         1          7.0      7.0      0.0      return goods

Total time: 0.0141473 s
File: C:\Users\User\Desktop\AUB\FALL_24_25\EECE_435L\Project\435L-Project\inventory_service\services\inventory_service.py
Function: update_goods at line 66

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    66                                           def update_goods(item_id, update_data):
    67                                               """
    68                                               Update the details of an inventory item.
    69                                           
    70                                               Args:
    71                                                   item_id (int): The ID of the inventory item to update.
    72                                                   update_data (dict): A dictionary containing the fields to update.
    73                                           
    74                                               Raises:
    75                                                   ValueError: If the item is not found.
    76                                           
    77                                               Returns:
    78                                                   Inventory: The updated inventory item.
    79                                               """
    80         1      38825.0  38825.0     27.4      goods = Inventory.query.get(item_id)
    81         1          4.0      4.0      0.0      if not goods:
    82                                                   raise ValueError("Item not found")
    83                                           
    84         3         27.0      9.0      0.0      for key, value in update_data.items():
    85         2         81.0     40.5      0.1          if hasattr(goods, key):
    86         2        325.0    162.5      0.2              setattr(goods, key, value)
    87                                           
    88         1     102204.0 102204.0     72.2      db.session.commit()
    89         1          7.0      7.0      0.0      return goods

Total time: 0.0025056 s
File: C:\Users\User\Desktop\AUB\FALL_24_25\EECE_435L\Project\435L-Project\inventory_service\services\inventory_service.py
Function: get_all_inventory at line 91

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    91                                           def get_all_inventory():
    92                                               """
    93                                               Retrieve all items in the inventory.
    94                                           
    95                                               Returns:
    96                                                   list: A list of all `Inventory` objects.
    97                                               """
    98         1      25056.0  25056.0    100.0      return Inventory.query.all()

